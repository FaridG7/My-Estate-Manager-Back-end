let queries,jwt;_da5‍.x([["setManager",()=>setManager],["getToken",()=>getToken]]);_da5‍.w("./queries.js",[["queries",["queries"],function(v){queries=v}]]);_da5‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);const pgp = require("pg-promise")();
const db = pgp({
  host: "localhost",
  port: 5432,
  database: "myestatemanager",
  user: "postgres",
  password: "farid.G1382",
});

require("dotenv").config();


       async function setManager(req, res, next) {
  try {
    const { managerId, password } = req.body;
    if (!managerId || !password) return res.status(400).send("bad request");
    const manager = await db.one(queries.getManager, [managerId]);
    if (manager) {
      if (manager.password === password) {
        req.manager = manager;
        next();
      }
      return res.status(401).send("Invalid credentials");
    }
    return res.status(404).send("The userId is not found.");
  } catch (error) {
    _da5‍.g.console.error(error);
    return res.status(500).send("Internal Error");
  }
}

       function getToken(req, res) {
  try {
    const { manager } = req;
    const accessToken = jwt.sign(manager, process.env.ACCESS_TOKEN_SECRET);
    return res.json({ accessToken });
  } catch (error) {
    _da5‍.g.console.error("error: ", error);
    return res.status(500).send("Internal Error");
  }
}
